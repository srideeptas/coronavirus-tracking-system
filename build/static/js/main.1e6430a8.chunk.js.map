{"version":3,"sources":["components/LineGraph.js","components/Card.js","components/CovidSummary.js","axios.js","App.js","reportWebVitals.js","index.js"],"names":["LineGraph","props","style","width","height","margin","data","labels","label","map","l","substring","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","yAxis","Card","className","children","CovidSummary","totalConfirmed","totalRecovered","totalDeaths","country","textTransform","display","justifyContent","value","displayType","thousandSeparator","axiosInstance","axios","create","baseURL","App","useState","setTotalConfirmed","setTotalRecovered","setTotalDeaths","loading","setLoading","covidSummary","setCovidSummary","days","setDays","setCountry","coronaCountAr","setCoronaCountAr","setLabel","useEffect","get","then","res","status","Global","TotalConfirmed","TotalRecovered","TotalDeaths","console","log","catch","error","formatDate","date","d","Date","year","getFullYear","month","getMonth","slice","_date","getDate","getCoronaReportByDateRange","countrySlug","from","to","yAxisCoronaCount","Cases","xAxisLabel","covidDetails","Countries","find","Slug","onChange","e","target","setDate","Country","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAmDeA,EA1CG,SAACC,GACf,OACI,qBACIC,MACI,CACIC,MAAO,QACPC,OAAQ,QACRC,OAAQ,aALpB,SAUG,cAAC,IAAD,CAAMC,KAAO,CACTC,OAASN,EAAMO,MAAMC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,UAAU,EAAE,OAC5CC,SAAU,CACN,CACIJ,MAAO,mCACPK,MAAM,EACNC,YAAa,GACbC,gBAAiB,qBACjBC,YAAa,qBACbC,eAAiB,OACjBC,WAAY,GACZC,iBAAmB,EACnBC,gBAAiB,QACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,qBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChBvB,KAAML,EAAM6B,cCzBpBC,EATF,SAAC9B,GACV,OACI,qBAAK+B,UAAU,OAAf,SACK/B,EAAMgC,Y,QCiDJC,EAlDM,SAACjC,GAElB,IACIkC,EAIAlC,EAJAkC,eACAC,EAGAnC,EAHAmC,eACAC,EAEApC,EAFAoC,YACAC,EACArC,EADAqC,QAKJ,OACI,8BACI,gCACI,qBAAIpC,MAAO,CAACqC,cAAgB,cAA5B,UAAwD,KAAZD,EAAiB,6BAA+BA,EAA5F,OACA,sBAAKpC,MAAO,CACRsC,QAAS,OACTC,eAAgB,UAFpB,UAKI,eAAC,EAAD,WACI,yDAAkC,uBAClC,+BACI,cAAC,IAAD,CAAcC,MAASP,EACvBQ,YAAa,OACbC,mBAAqB,SAG7B,eAAC,EAAD,WACI,yDAAkC,uBAClC,+BAAO,cAAC,IAAD,CAAcF,MAASN,EAC1BO,YAAa,OACbC,mBAAqB,SAG7B,eAAC,EAAD,WACI,gDAAyB,uBACzB,+BAAO,cAAC,IAAD,CAAcF,MAASL,EAC1BM,YAAa,OACbC,mBAAqB,kB,QC5ClCC,E,OAJOC,EAAMC,OAAO,CAC/BC,QAAS,gCC4IEC,MAzIf,WAGE,MAA4CC,mBAAS,GAArD,mBAAOf,EAAP,KAAuBgB,EAAvB,KACA,EAA4CD,mBAAS,GAArD,mBAAOd,EAAP,KAAuBgB,EAAvB,KACA,EAAsCF,mBAAS,GAA/C,mBAAOb,EAAP,KAAoBgB,EAApB,KACA,EAA8BH,oBAAS,GAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KACA,EAAwCL,mBAAS,IAAjD,mBAAOM,EAAP,KAAqBC,EAArB,KACA,EAAwBP,mBAAS,GAAjC,mBAAOQ,EAAP,KAAaC,EAAb,KACA,EAA6BT,mBAAS,IAAtC,mBAAOZ,EAAP,KAAgBsB,EAAhB,KACA,EAA0CV,mBAAS,IAAnD,mBAAOW,EAAP,KAAsBC,EAAtB,KACA,EAA0BZ,mBAAS,IAAnC,mBAAO1C,EAAP,KAAcuD,EAAd,KAIAC,qBAAU,WAERT,GAAW,GACXT,EAAMmB,IAAI,YACTC,MAAK,SAAAC,GACJZ,GAAW,GAEO,MAAfY,EAAIC,SACLjB,EAAkBgB,EAAI7D,KAAK+D,OAAOC,gBAClClB,EAAkBe,EAAI7D,KAAK+D,OAAOE,gBAClClB,EAAec,EAAI7D,KAAK+D,OAAOG,aAC/Bf,EAAgBU,EAAI7D,OAMtBmE,QAAQC,IAAIP,MAEbQ,OAAM,SAAAC,GACLH,QAAQC,IAAIE,QAMb,IAEH,IAAMC,EAAa,SAACC,GAClB,IAAMC,EAAI,IAAIC,KAAKF,GACbG,EAAOF,EAAEG,cACTC,EAAQ,WAAIJ,EAAEK,WAAW,GAAIC,OAAO,GACpCC,EAAQP,EAAEQ,UAEhB,MAAM,GAAN,OAAUN,EAAV,YAAkBE,EAAlB,YAA2BG,IAsBvBE,EAA6B,SAACC,EAAaC,EAAMC,GACrD7C,EAAMmB,IAAN,mBAAsBwB,EAAtB,kCAA2DC,EAA3D,yBAAgFC,EAAhF,eACCzB,MAAK,SAAAC,GACJM,QAAQC,IAAIP,GAEZ,IAAMyB,EAAmBzB,EAAI7D,KAAKG,KAAI,SAAAsE,GAAC,OAAIA,EAAEc,SACvCC,EAAa3B,EAAI7D,KAAKG,KAAI,SAAAsE,GAAC,OAAIA,EAAEC,QACjCe,EAAevC,EAAawC,UAAUC,MAAK,SAAA3D,GAAO,OAAIA,EAAQ4D,OAAST,KAE7E3B,EAAiB8B,GACjBzC,EAAkB4C,EAAazB,gBAC/BlB,EAAkB2C,EAAaxB,gBAC/BlB,EAAe0C,EAAavB,aAC5BT,EAAS+B,MAIVnB,OAAM,SAAAC,GACLH,QAAQC,IAAIE,OAQhB,OAAGtB,EACM,yDAIP,sBAAKtB,UAAU,MAAf,UACE,cAAC,EAAD,CACEG,eAAiBA,EACjBC,eAAiBA,EACjBC,YAAcA,EACdC,QAASA,IAGX,gCACE,yBAAQI,MAAOJ,EAAS6D,SA3DP,SAACC,GACtBxC,EAAWwC,EAAEC,OAAO3D,OACpB,IAAMqC,EAAE,IAAIC,KACNW,EAAGd,EAAWE,GACdW,EAAOb,EAAWE,EAAEuB,QAAQvB,EAAEQ,UAAU7B,IAI9C8B,EAA2BY,EAAEC,OAAO3D,MAAMgD,EAAKC,IAmD3C,UACE,wBAAQjD,MAAM,GAAd,4BAEEc,EAAawC,WAAaxC,EAAawC,UAAUvF,KAAI,SAAA6B,GAAO,OAC1D,wBAA2BI,MAAOJ,EAAQ4D,KAA1C,SAAiD5D,EAAQiE,SAA5CjE,EAAQ4D,YAK3B,yBAAQxD,MAAOgB,EAAMyC,SAzDP,SAACC,GACnBzC,EAAQyC,EAAEC,OAAO3D,OACjB,IAAMqC,EAAE,IAAIC,KACNW,EAAGd,EAAWE,GACdW,EAAOb,EAAWE,EAAEuB,QAAQvB,EAAEQ,UAAUa,EAAEC,OAAO3D,QACvD8C,EAA2BlD,EAASoD,EAAMC,IAoDtC,UACE,wBAAQjD,MAAM,IAAd,yBACA,wBAAQA,MAAM,KAAd,0BACA,wBAAQA,MAAM,KAAd,iCAKJ,cAAC,EAAD,CACEZ,MAAS+B,EACTrD,MAASA,QC5HFgG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBxC,MAAK,YAAkD,IAA/CyC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.1e6430a8.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\n/**\r\n * \r\n * @author\r\n * @function LineGraph\r\n */\r\n\r\nconst LineGraph = (props) => {\r\n    return(\r\n        <div\r\n            style={\r\n                {\r\n                    width: '600px',\r\n                    height: '600px',\r\n                    margin: '50px auto',\r\n                }\r\n            }\r\n        \r\n        >\r\n           <Line data ={{\r\n               labels : props.label.map(l => l.substring(0,10)),\r\n               datasets: [\r\n                   {\r\n                       label: 'Total Covid Cases in the country',\r\n                       fill: true,\r\n                       lineTension: 0.1,\r\n                       backgroundColor: 'rgba(75,192,192,1)',\r\n                       borderColor: 'rgba(75,192,192,1)',\r\n                       borderCapStyle : 'butt',\r\n                       borderDash: [],\r\n                       borderDashOffset : 0.0,\r\n                       borderJoinStyle: 'miter',\r\n                       pointBorderColor: 'rgba(75,192,192,1)',\r\n                       pointBackgroundColor: '#fff',\r\n                       pointBorderWidth: 1,\r\n                       pointHoverRadius: 5,\r\n                       pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                       pointHoverBorderColor: 'rgba(75,192,192,1)',\r\n                       pointHoverBorderWidth: 2,\r\n                       pointRadius: 1,\r\n                       pointHitRadius: 10,\r\n                       data: props.yAxis\r\n                    }\r\n                ]\r\n            }}/>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default LineGraph\r\n","import React from 'react';\r\n\r\n\r\n/**\r\n * \r\n * @author\r\n * @function Card\r\n */\r\n\r\nconst Card = (props) => {\r\n    return(\r\n        <div className=\"card\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Card","import React from 'react';\r\nimport Card from './Card';\r\nimport NumberFormat from 'react-number-format';\r\n\r\n\r\n/**\r\n * \r\n * @author\r\n * @function CovidSummary\r\n */\r\n\r\nconst CovidSummary = (props) => {\r\n\r\n    const {\r\n        totalConfirmed,\r\n        totalRecovered,\r\n        totalDeaths,\r\n        country\r\n    } = props;\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h1 style={{textTransform : 'capitalize'}}>{country === '' ? 'World Wide COVID-19 Report' : country} </h1>\r\n                <div style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'center'\r\n                }}>\r\n\r\n                    <Card>\r\n                        <span>Total Confirmed Cases</span><br />\r\n                        <span>{\r\n                            <NumberFormat value = {totalConfirmed} \r\n                            displayType={'text'} \r\n                            thousandSeparator = {true} />}</span>\r\n                    </Card>\r\n\r\n                    <Card>\r\n                        <span>Total Recovered Cases</span><br />\r\n                        <span>{<NumberFormat value = {totalRecovered} \r\n                            displayType={'text'} \r\n                            thousandSeparator = {true} />}</span>\r\n                    </Card>\r\n\r\n                    <Card>\r\n                        <span>Total Deaths</span><br />\r\n                        <span>{<NumberFormat value = {totalDeaths} \r\n                            displayType={'text'} \r\n                            thousandSeparator = {true} />}</span>\r\n                    </Card>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default CovidSummary\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import axios from 'axios';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'https://api.covid19api.com/'\r\n});\r\n\r\nexport default axiosInstance;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport LineGraph from './components/LineGraph';\nimport CovidSummary from './components/CovidSummary';\nimport axios from './axios';\n\nfunction App() {\n\n\n  const [totalConfirmed, setTotalConfirmed] = useState(0);\n  const [totalRecovered, setTotalRecovered ]= useState(0);\n  const [totalDeaths, setTotalDeaths] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [covidSummary, setCovidSummary] = useState({});\n  const [days, setDays] = useState(7);\n  const [country, setCountry] =useState('');\n  const [coronaCountAr, setCoronaCountAr] = useState([]);\n  const [label, setLabel] = useState([]);\n\n\n  //componentDidMount\n  useEffect(() => {\n\n    setLoading(true);\n    axios.get('/summary')\n    .then(res => {\n      setLoading(false);\n\n      if(res.status === 200){\n        setTotalConfirmed(res.data.Global.TotalConfirmed);\n        setTotalRecovered(res.data.Global.TotalRecovered);\n        setTotalDeaths(res.data.Global.TotalDeaths);\n        setCovidSummary(res.data);\n\n      }\n      \n\n\n      console.log(res);\n    })\n    .catch(error => {\n      console.log(error)\n    })\n\n\n\n\n  }, []);\n\n  const formatDate = (date) => {\n    const d = new Date(date);\n    const year = d.getFullYear();\n    const month = `0${d.getMonth()+1}`.slice(-2);\n    const _date = d.getDate();\n\n    return `${year}-${month}-${_date}`;\n  }\n\n  const countryHandler = (e) => {\n    setCountry(e.target.value); //whatever country we select it will be assigned\n    const d=new Date();\n    const to=formatDate(d);\n    const from = formatDate(d.setDate(d.getDate()-days));\n\n    //console.log(from,to);\n\n    getCoronaReportByDateRange(e.target.value,from,to );\n  }\n\n  const daysHandler = (e) => {\n    setDays(e.target.value);\n    const d=new Date();\n    const to=formatDate(d);\n    const from = formatDate(d.setDate(d.getDate()-e.target.value));\n    getCoronaReportByDateRange(country, from, to);\n  }\n\n  const getCoronaReportByDateRange = (countrySlug, from, to) => {\n    axios.get(`/country/${countrySlug}/status/confirmed?from=${from}T00:00:00Z&to=${to}T00:00:00Z`)\n    .then(res=>{\n      console.log(res);\n\n      const yAxisCoronaCount = res.data.map(d => d.Cases);\n      const xAxisLabel = res.data.map(d => d.Date);\n      const covidDetails = covidSummary.Countries.find(country => country.Slug === countrySlug);\n      \n      setCoronaCountAr(yAxisCoronaCount);\n      setTotalConfirmed(covidDetails.TotalConfirmed);\n      setTotalRecovered(covidDetails.TotalRecovered);\n      setTotalDeaths(covidDetails.TotalDeaths);\n      setLabel(xAxisLabel);\n\n\n    })\n    .catch(error=> {\n      console.log(error);\n    })\n  }\n\n\n\n\n\n  if(loading){\n    return <p>Fetching data from api..</p>\n  }\n\n  return (\n    <div className=\"App\">\n      <CovidSummary \n        totalConfirmed ={totalConfirmed}\n        totalRecovered ={totalRecovered}\n        totalDeaths= {totalDeaths}\n        country={country}\n      \n      />\n      <div>\n        <select value={country} onChange={countryHandler}>\n          <option value=''>Select Country</option>\n          {\n            covidSummary.Countries && covidSummary.Countries.map(country => \n              <option key={country.Slug} value={country.Slug}>{country.Country}</option>\n                )\n          }\n        </select>\n\n        <select value={days} onChange ={daysHandler}>\n          <option value=\"7\">Last 7 days</option>\n          <option value=\"30\">Last 30 days</option>\n          <option value=\"90\">Last 90 days </option>\n        </select>\n      </div>\n    \n      \n      <LineGraph\n        yAxis = {coronaCountAr}\n        label = {label}\n      \n      />      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}